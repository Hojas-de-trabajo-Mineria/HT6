library(psych)
library(dplyr)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(RColorBrewer)
library(nortest)
library(lmtest)
library(jtools)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)
library(randomForest)
pricesTrain <- read.csv("train.csv")
colSums(is.na(pricesTrain))
orderPrice <- pricesTrain[order(pricesTrain$SalePrice),]
orderPrice['Clasificacion']<- list(1:nrow(orderPrice))
orderPrice <- orderPrice %>% select(-c(Id, MoSold, YrSold, GarageYrBlt, Alley, LotShape, LandContour, Condition2, YearBuilt, Exterior2nd, FireplaceQu, GarageQual, SaleType,BsmtFinType2, BsmtFinSF2, BsmtUnfSF, BsmtFullBath, BsmtHalfBath, X3SsnPorch, GarageFinish, YearRemodAdd, PoolQC, Fence, MiscFeature))
orderPrice <- orderPrice %>% mutate_at (c("MSSubClass","MSZoning", "Utilities", "LotConfig", "Street", "LandSlope", "Neighborhood", "Condition1", "BldgType", "HouseStyle", "OverallQual", "OverallCond", "RoofStyle", "PavedDrive", "RoofMatl", "Exterior1st", "MasVnrType", "ExterQual", "ExterCond","Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "Heating", "HeatingQC", "CentralAir","Electrical", "Functional", "GarageType", "GarageCond", "SaleCondition", "KitchenQual"), as.factor)
orderPrice <- orderPrice %>% mutate_at(c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice'), as.numeric)
orderPrice$Clasificacion[orderPrice$SalePrice <= 139000] <- 'Economica'
orderPrice$Clasificacion[orderPrice$SalePrice > 139000 & orderPrice$SalePrice <= 189893 ] <- 'Intermedia'
orderPrice$Clasificacion[orderPrice$SalePrice > 189893] <- 'Cara'
orderPrice <- orderPrice %>% mutate_at(c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice'), scale)
# COnvertir en factores
orderPrice <- orderPrice%>%mutate_at(c("Clasificacion"),as.factor)
set.seed(456)
economicas <- orderPrice[orderPrice$Clasificacion == 'Economica',]
intermedias <- orderPrice[orderPrice$Clasificacion == 'Intermedia',]
caras <- orderPrice[orderPrice$Clasificacion == 'Cara',]
filasCasasE <- sample(nrow(economicas), nrow(economicas)*0.7)
filasCasasI <- sample(nrow(intermedias), nrow(intermedias)*0.7)
filasCasasC <- sample(nrow(caras), nrow(caras)*0.7)
train <- rbind(economicas[filasCasasE,], intermedias[filasCasasI,], caras[filasCasasC,])
test <- rbind(economicas[-filasCasasE,], intermedias[-filasCasasI,], caras[-filasCasasC,])
modeloSVM_1<-svm(Clasificacion~., data=train, cost=2^-5, kernel="linear")
modeloSVM_2<-svm(Clasificacion~., data=train, cost=0.5, kernel="polynomial", degree = 4, coef = 1)
modeloSVM_3<-svm(Clasificacion~., data=train, gamma=2^-5, kernel="radial")
modeloSVM_4<-svm(Clasificacion~., data=train, gamma=2^1, kernel="radial")
modeloSVM_1$fitted
summary(modeloSVM_1)
summary(modeloSVM_2)
summary(modeloSVM_3)
summary(modeloSVM_4)
confusionMatrix(test[complete.cases(test), 58], prediccion1)
prediccion1 <- predict(modeloSVM_1, newdata = test[,-58])
prediccion2 <- predict(modeloSVM_2, newdata = test[,-58])
prediccion3 <- predict(modeloSVM_3, newdata = test[,-58])
prediccion4 <- predict(modeloSVM_4, newdata = test[,-58])
confusionMatrix(test[complete.cases(test), 58], prediccion1)
confusionMatrix(test[complete.cases(test), 58], prediccion2)
confusionMatrix(test[complete.cases(test), 58], prediccion3)
confusionMatrix(test[complete.cases(test), 58], prediccion4)
library(e1071)
library(caret)
porcentaje<-0.7
datos<-iris
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelosvm<-svm(Species~., data = train, scale = F)
summary(modelosvm)
modelosvm$index
plot(modelosvm,train,Petal.Length~Sepal.Length)
modeloSVM_L<-svm(Species~., data=train, cost=2^5, kernel="linear") #98%
modeloSVM_L<-svm(Species~., data=train, cost=2^-5, kernel="linear") #88%
modeloSVM_L<-svm(Species~., data=train, cost=0.5, kernel="linear")#95%
modeloSVM_R<-svm(Species~., data=train, gamma=2^-5, kernel="radial")
modeloSVM_R<-svm(Species~., data=train, gamma=2^1, kernel="radial")
prediccionL<-predict(modeloSVM_L,newdata=test[,1:4])
prediccionR<-predict(modeloSVM_R,newdata=test[,1:4])
modeloTuneado<-tune.svm(Species~., data=train, cost=c(0.01,0.1,0.5,1,5,10,16,20,32), kernel="linear")
predMejorModelo<-predict(modeloTuneado$best.model,newdata = test[,1:4])
confusionMatrix(test$Species,prediccionL)
confusionMatrix(test$Species,prediccionR)
confusionMatrix(test$Species,predMejorModelo)
trainNum <- train[, c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice')]
library(psych)
library(dplyr)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(RColorBrewer)
library(nortest)
library(lmtest)
library(jtools)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)
library(randomForest)
pricesTrain <- read.csv("train.csv")
colSums(is.na(pricesTrain))
orderPrice <- pricesTrain[order(pricesTrain$SalePrice),]
orderPrice['Clasificacion']<- list(1:nrow(orderPrice))
orderPrice <- orderPrice %>% select(-c(Id, MoSold, YrSold, GarageYrBlt, Alley, LotShape, LandContour, Condition2, YearBuilt, Exterior2nd, FireplaceQu, GarageQual, SaleType,BsmtFinType2, BsmtFinSF2, BsmtUnfSF, BsmtFullBath, BsmtHalfBath, X3SsnPorch, GarageFinish, YearRemodAdd, PoolQC, Fence, MiscFeature))
orderPrice <- orderPrice %>% mutate_at (c("MSSubClass","MSZoning", "Utilities", "LotConfig", "Street", "LandSlope", "Neighborhood", "Condition1", "BldgType", "HouseStyle", "OverallQual", "OverallCond", "RoofStyle", "PavedDrive", "RoofMatl", "Exterior1st", "MasVnrType", "ExterQual", "ExterCond","Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "Heating", "HeatingQC", "CentralAir","Electrical", "Functional", "GarageType", "GarageCond", "SaleCondition", "KitchenQual"), as.factor)
orderPrice <- orderPrice %>% mutate_at(c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice'), as.numeric)
orderPrice$Clasificacion[orderPrice$SalePrice <= 139000] <- 'Economica'
orderPrice$Clasificacion[orderPrice$SalePrice > 139000 & orderPrice$SalePrice <= 189893 ] <- 'Intermedia'
orderPrice$Clasificacion[orderPrice$SalePrice > 189893] <- 'Cara'
orderPrice <- orderPrice %>% mutate_at(c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice'), scale)
# COnvertir en factores
orderPrice <- orderPrice%>%mutate_at(c("Clasificacion"),as.factor)
set.seed(456)
economicas <- orderPrice[orderPrice$Clasificacion == 'Economica',]
intermedias <- orderPrice[orderPrice$Clasificacion == 'Intermedia',]
caras <- orderPrice[orderPrice$Clasificacion == 'Cara',]
filasCasasE <- sample(nrow(economicas), nrow(economicas)*0.7)
filasCasasI <- sample(nrow(intermedias), nrow(intermedias)*0.7)
filasCasasC <- sample(nrow(caras), nrow(caras)*0.7)
train <- rbind(economicas[filasCasasE,], intermedias[filasCasasI,], caras[filasCasasC,])
test <- rbind(economicas[-filasCasasE,], intermedias[-filasCasasI,], caras[-filasCasasC,])
modeloSVM_1<-svm(Clasificacion~., data=train, cost=2^-5, kernel="linear")
modeloSVM_2<-svm(Clasificacion~., data=train, cost=0.5, kernel="polynomial", degree = 4, coef = 1)
modeloSVM_3<-svm(Clasificacion~., data=train, gamma=2^-5, kernel="radial")
modeloSVM_4<-svm(Clasificacion~., data=train, gamma=2^1, kernel="radial")
modeloSVM_1$fitted
summary(modeloSVM_1)
summary(modeloSVM_2)
summary(modeloSVM_3)
summary(modeloSVM_4)
prediccion1 <- predict(modeloSVM_1, newdata = test[,-58])
prediccion2 <- predict(modeloSVM_2, newdata = test[,-58])
prediccion3 <- predict(modeloSVM_3, newdata = test[,-58])
prediccion4 <- predict(modeloSVM_4, newdata = test[,-58])
confusionMatrix(test[complete.cases(test), 58], prediccion1)
confusionMatrix(test[complete.cases(test), 58], prediccion2)
confusionMatrix(test[complete.cases(test), 58], prediccion3)
confusionMatrix(test[complete.cases(test), 58], prediccion4)
trainNum <- train[, c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice')]
testNum <- test[, c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice')]
msvmrt <- tune.svm(SalePrice~., data = trainNum, cost=c(0.01,0.1,0.5,1,5,10,16,20,32), kernel="linear")
summary(msvmrt$best.model)
prediccionR <- predict(msvmrt$best.model, newdata = testNum[, -26])
plot(modeloSVM_1, train)
modeloSVM_1<-svm(Clasificacion~., data=train, cost=2^-5, kernel="linear")
modeloSVM_2<-svm(Clasificacion~., data=train, cost=0.5, kernel="polynomial", degree = 4, coef = 1)
modeloSVM_3<-svm(Clasificacion~., data=train, gamma=2^-5, kernel="radial")
modeloSVM_4<-svm(Clasificacion~., data=train, gamma=2^1, kernel="radial")
modeloSVM_1$fitted
summary(modeloSVM_1)
summary(modeloSVM_2)
summary(modeloSVM_3)
summary(modeloSVM_4)
prediccion1 <- predict(modeloSVM_1, newdata = test[,-58])
prediccion2 <- predict(modeloSVM_2, newdata = test[,-58])
prediccion3 <- predict(modeloSVM_3, newdata = test[,-58])
prediccion4 <- predict(modeloSVM_4, newdata = test[,-58])
confusionMatrix(test[complete.cases(test), 58], prediccion1)
confusionMatrix(test[complete.cases(test), 58], prediccion2)
confusionMatrix(test[complete.cases(test), 58], prediccion3)
confusionMatrix(test[complete.cases(test), 58], prediccion4)
plot(modeloSVM_1, train)
modeloSVM_1<-svm(Clasificacion~., data=train, cost=2^-5, kernel="linear")
plot(modeloSVM_1, train)
plot(modeloSVM_1, train, LotFrontage~LotArea)
plot(modeloSVM_1, train, OverallCond~LotArea)
plot(modeloSVM_1, train, OverallCond~HouseStyle)
plot(modeloSVM_1, train, OverallCond~Heating)
plot(modeloSVM_1, train, OverallCond~GrLivArea)
confusionMatrix(test[complete.cases(test), 58], prediccion1)
confusionMatrix(test[complete.cases(test), 58], prediccion2)
confusionMatrix(test[complete.cases(test), 58], prediccion3)
confusionMatrix(test[complete.cases(test), 58], prediccion4)
confusionMatrix(test[complete.cases(test), 58], prediccion1)
confusionMatrix(test[complete.cases(test), 58], prediccion2)
confusionMatrix(test[complete.cases(test), 58], prediccion3)
confusionMatrix(test[complete.cases(test), 58], prediccion4)
library(psych)
library(dplyr)
library(ggplot2)
library(reshape2)
library(psych)
library(corrplot)
library(RColorBrewer)
library(nortest)
library(lmtest)
library(jtools)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
pricesTrain <- read.csv("train.csv")
set.seed(456)
p <- 0.7
corte <- sample(nrow(pricesTrain), nrow(pricesTrain) * p)
train <- pricesTrain[corte,]
train['YearsBuilt'] = 2023 - train$YearBuilt
train['YearsRem'] = 2023 - train$YearRemodAdd
test <- pricesTrain[-corte,]
test['YearsBuilt'] = 2023 - test$YearBuilt
test['YearsRem'] = 2023 - test$YearRemodAdd
str(train)
numericasTrain <- train[, c('MSSubClass', 'LotArea', 'OverallQual', 'OverallCond', 'YearsBuilt', 'YearsRem', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'X3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'SalePrice')]
numericasTest <- test[, c('MSSubClass', 'LotArea', 'OverallQual', 'OverallCond', 'YearsBuilt', 'YearsRem', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'X3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'SalePrice')]
library(rpart)
arbol1 <- rpart(SalePrice ~ .,data=numericasTrain)
rpart.plot(arbol1)
ventas <- numericasTest$SalePrice
test2 <- numericasTest[,-81]
a<-predict(arbol1,newdata=test2)
b1<-mean(a-test$GrLivArea)
plot(test$GrLivArea,a,col="green")
par(new=TRUE)
plot(test$GrLivArea,test$SalePrice,col="blue")
arbol2 <- rpart(SalePrice ~ .,data=numericasTrain,cp=0.1)
a2<-predict(arbol2,newdata=test2)
b2<-mean(a2-test$GrLivArea)
arbol3 <- rpart(SalePrice ~ .,data=numericasTrain,cp=0.5)
a3<-predict(arbol3,newdata=test2)
b3<-mean(a3-test$GrLivArea)
arbol4 <- rpart(SalePrice ~ .,data=numericasTrain,cp=0.3)
a4<-predict(arbol4,newdata=test2)
b4<-mean(a4-test$GrLivArea)
quantile(pricesTrain$SalePrice, na.rm = T, probs = c(0,0.33,0.66,1))
orderPrice <- pricesTrain[order(pricesTrain$SalePrice),]
orderPrice['Clasificacion']<- list(1:nrow(orderPrice))
orderPrice <- orderPrice %>% select(-c(Id, MoSold, YrSold, GarageYrBlt, Alley, LotShape, LandContour, Condition2, YearBuilt, Exterior2nd, FireplaceQu, GarageQual, SaleType,BsmtFinType2, BsmtFinSF2, BsmtUnfSF, BsmtFullBath, BsmtHalfBath, X3SsnPorch, GarageFinish))
orderPrice <- orderPrice %>% mutate_at (c("MSSubClass","MSZoning", "Utilities", "LotConfig", "Street", "LandSlope", "Neighborhood", "Condition1", "BldgType", "HouseStyle", "OverallQual", "OverallCond", "RoofStyle", "PavedDrive", "RoofMatl", "Exterior1st", "MasVnrType", "ExterQual", "ExterCond","Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "Heating", "HeatingQC", "CentralAir","Electrical", "Functional", "GarageType", "GarageCond", "PoolQC", "Fence", "MiscFeature", "SaleCondition"), as.factor)
orderPrice$Clasificacion[orderPrice$SalePrice <= 139000] <- 'Economica'
orderPrice$Clasificacion[orderPrice$SalePrice > 139000 & orderPrice$SalePrice <= 189893 ] <- 'Intermedia'
orderPrice$Clasificacion[orderPrice$SalePrice > 189893] <- 'Cara'
# COnvertir en factores
orderPrice <- orderPrice%>%mutate_at(c("Clasificacion"),as.factor)
set.seed(456)
economicas <- orderPrice[orderPrice$Clasificacion == 'Economica',]
intermedias <- orderPrice[orderPrice$Clasificacion == 'Intermedia',]
caras <- orderPrice[orderPrice$Clasificacion == 'Cara',]
filasCasasE <- sample(nrow(economicas), nrow(economicas)*0.7)
filasCasasI <- sample(nrow(intermedias), nrow(intermedias)*0.7)
filasCasasC <- sample(nrow(caras), nrow(caras)*0.7)
train <- rbind(economicas[filasCasasE,], intermedias[filasCasasI,], caras[filasCasasC,])
test <- rbind(economicas[-filasCasasE,], intermedias[-filasCasasI,], caras[-filasCasasC,])
y<- test[,"Clasificacion"]
dataResp <- test
test <- test%>% select(-c("SalePrice", "Clasificacion"))
train <- train %>% select(-c("SalePrice"))
modeloClasificacion <- rpart(Clasificacion~., train, method = "class")
rpart.plot(modeloClasificacion)
ypred <- predict(modeloClasificacion, newdata = test)
ypred <- apply(ypred, 1, function(x) colnames(ypred)[which.max(x)])
ypred <- factor(ypred)
plot(ypred , col="green",density=20,angle=135)
plot(y, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
confusionMatrix(ypred, y)
set.seed(456)
ct <- trainControl(method = 'cv', number = 10, verboseIter = T)
mcv <- train(train[,-61], train$Clasificacion, trControl = ct, method = 'rpart')
y2pred <- predict(mcv, newdata = test)
confusionMatrix(y2pred, y)
modeloClasificacion3 <- rpart(Clasificacion~., train, method = "class", maxdepth = 3)
rpart.plot(modeloClasificacion3)
ypred3 <- predict(modeloClasificacion, newdata = test)
ypred3 <- apply(ypred3, 1, function(x) colnames(ypred3)[which.max(x)])
ypred3 <- factor(ypred3)
confusionMatrix(ypred3, y)
modeloClasificacion5 <- rpart(Clasificacion~., train, method = "class", maxdepth = 5)
rpart.plot(modeloClasificacion5)
ypred5 <- predict(modeloClasificacion, newdata = test)
ypred5 <- apply(ypred5, 1, function(x) colnames(ypred5)[which.max(x)])
ypred5 <- factor(ypred5)
confusionMatrix(ypred5, y)
modeloClasificacion7 <- rpart(Clasificacion~., train, method = "class", maxdepth = 7)
rpart.plot(modeloClasificacion7)
ypred7 <- predict(modeloClasificacion, newdata = test)
ypred7 <- apply(ypred7, 1, function(x) colnames(ypred7)[which.max(x)])
ypred7 <- factor(ypred7)
confusionMatrix(ypred7, y)
train <- train %>% select (-c(PoolQC, Fence, MiscFeature, SaleCondition))
na.omit(train)
mrf <- randomForest(Clasificacion~.,train, na.action = na.omit)
summary(mrf)
ypredrf <- predict(mrf, newdata = test)
ypredrf <- factor(ypredrf)
confusionMatrix(ypredrf, y)
plot(prediccion1 , col="green",density=20,angle=135)
plot(train, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
plot(prediccion1 , col="green",density=20,angle=135)
plot(complete.cases(test), col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
ytest <-y<- test[,"Clasificacion"]
ytest <- test[,"Clasificacion"]
ytest <- test[complete.cases(test), 58]
plot(prediccion1 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
ytest <- test[, 58]
plot(prediccion1 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue")
ytest <- test[complete.cases(test), 58]
ytest <- test[complete.cases(test), 58]
plot(prediccion1 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
# COnvertir en factores
orderPrice <- orderPrice%>%mutate_at(c("Clasificacion"),as.factor)
set.seed(456)
economicas <- orderPrice[orderPrice$Clasificacion == 'Economica',]
intermedias <- orderPrice[orderPrice$Clasificacion == 'Intermedia',]
caras <- orderPrice[orderPrice$Clasificacion == 'Cara',]
filasCasasE <- sample(nrow(economicas), nrow(economicas)*0.7)
filasCasasI <- sample(nrow(intermedias), nrow(intermedias)*0.7)
filasCasasC <- sample(nrow(caras), nrow(caras)*0.7)
train <- rbind(economicas[filasCasasE,], intermedias[filasCasasI,], caras[filasCasasC,])
test <- rbind(economicas[-filasCasasE,], intermedias[-filasCasasI,], caras[-filasCasasC,])
modeloSVM_1<-svm(Clasificacion~., data=train, cost=2^-5, kernel="linear")
colSums(is.na(pricesTrain))
orderPrice <- pricesTrain[order(pricesTrain$SalePrice),]
orderPrice['Clasificacion']<- list(1:nrow(orderPrice))
orderPrice <- orderPrice %>% select(-c(Id, MoSold, YrSold, GarageYrBlt, Alley, LotShape, LandContour, Condition2, YearBuilt, Exterior2nd, FireplaceQu, GarageQual, SaleType,BsmtFinType2, BsmtFinSF2, BsmtUnfSF, BsmtFullBath, BsmtHalfBath, X3SsnPorch, GarageFinish, YearRemodAdd, PoolQC, Fence, MiscFeature))
orderPrice <- orderPrice %>% mutate_at (c("MSSubClass","MSZoning", "Utilities", "LotConfig", "Street", "LandSlope", "Neighborhood", "Condition1", "BldgType", "HouseStyle", "OverallQual", "OverallCond", "RoofStyle", "PavedDrive", "RoofMatl", "Exterior1st", "MasVnrType", "ExterQual", "ExterCond","Foundation", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "Heating", "HeatingQC", "CentralAir","Electrical", "Functional", "GarageType", "GarageCond", "SaleCondition", "KitchenQual"), as.factor)
orderPrice <- orderPrice %>% mutate_at(c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice'), as.numeric)
orderPrice$Clasificacion[orderPrice$SalePrice <= 139000] <- 'Economica'
orderPrice$Clasificacion[orderPrice$SalePrice > 139000 & orderPrice$SalePrice <= 189893 ] <- 'Intermedia'
orderPrice$Clasificacion[orderPrice$SalePrice > 189893] <- 'Cara'
orderPrice <- orderPrice %>% mutate_at(c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice'), scale)
# COnvertir en factores
orderPrice <- orderPrice%>%mutate_at(c("Clasificacion"),as.factor)
set.seed(456)
economicas <- orderPrice[orderPrice$Clasificacion == 'Economica',]
intermedias <- orderPrice[orderPrice$Clasificacion == 'Intermedia',]
caras <- orderPrice[orderPrice$Clasificacion == 'Cara',]
filasCasasE <- sample(nrow(economicas), nrow(economicas)*0.7)
filasCasasI <- sample(nrow(intermedias), nrow(intermedias)*0.7)
filasCasasC <- sample(nrow(caras), nrow(caras)*0.7)
train <- rbind(economicas[filasCasasE,], intermedias[filasCasasI,], caras[filasCasasC,])
test <- rbind(economicas[-filasCasasE,], intermedias[-filasCasasI,], caras[-filasCasasC,])
modeloSVM_1<-svm(Clasificacion~., data=train, cost=2^-5, kernel="linear")
modeloSVM_2<-svm(Clasificacion~., data=train, cost=0.5, kernel="polynomial", degree = 4, coef = 1)
modeloSVM_3<-svm(Clasificacion~., data=train, gamma=2^-5, kernel="radial")
modeloSVM_4<-svm(Clasificacion~., data=train, gamma=2^1, kernel="radial")
modeloSVM_1$fitted
summary(modeloSVM_1)
summary(modeloSVM_2)
summary(modeloSVM_3)
summary(modeloSVM_4)
prediccion1 <- predict(modeloSVM_1, newdata = test[,-58])
prediccion2 <- predict(modeloSVM_2, newdata = test[,-58])
prediccion3 <- predict(modeloSVM_3, newdata = test[,-58])
prediccion4 <- predict(modeloSVM_4, newdata = test[,-58])
confusionMatrix(test[complete.cases(test), 58], prediccion1)
confusionMatrix(test[complete.cases(test), 58], prediccion2)
confusionMatrix(test[complete.cases(test), 58], prediccion3)
confusionMatrix(test[complete.cases(test), 58], prediccion4)
ytest <- test[complete.cases(test), 58]
plot(prediccion1 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
#Gráfica predicción 2
plot(prediccion2 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
#Gráfica predicción 3
plot(prediccion3 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
#Gráfica predicción 4
plot(prediccion4 , col="green",density=20,angle=135)
plot(ytest, col="blue",density=20,angle=45,add=TRUE, beside = TRUE)
legend("bottom",
c("Predicción del modelo","Datos reales"),
fill=c("green","blue"))
trainNum <- train[, c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice')]
testNum <- test[, c('MasVnrArea', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'BsmtFinSF1', 'TotalBsmtSF', 'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice')]
msvmrt <- tune.svm(SalePrice~., data = trainNum, cost=c(0.01,0.1,0.5,1,5,10,16,20,32), kernel="linear")
summary(msvmrt$best.model)
prediccionR <- predict(msvmrt$best.model, newdata = testNum[, -26])
confusionMatrix(testNum[complete.cases(testNum), 58], prediccionR)
confusionMatrix(testNum[, 58], prediccionR)
confusionMatrix(testNum[, 26], prediccionR)
confusionMatrix(testNum[complete.cases(testNum), 26], prediccionR)
